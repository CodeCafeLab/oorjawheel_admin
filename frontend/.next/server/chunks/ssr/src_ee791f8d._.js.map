{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\r\nimport { Check } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Checkbox = React.forwardRef<\r\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <CheckboxPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <CheckboxPrimitive.Indicator\r\n      className={cn(\"flex items-center justify-center text-current\")}\r\n    >\r\n      <Check className=\"h-4 w-4\" />\r\n    </CheckboxPrimitive.Indicator>\r\n  </CheckboxPrimitive.Root>\r\n))\r\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\r\n\r\nexport { Checkbox }\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,4KAAsB;QACrB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,iLAA2B;YAC1B,WAAW,IAAA,yHAAE,EAAC;sBAEd,cAAA,8OAAC,6MAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,4KAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { buttonVariants } from \"@/components/ui/button\"\r\n\r\nconst AlertDialog = AlertDialogPrimitive.Root\r\n\r\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\r\n\r\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\r\n\r\nconst AlertDialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Overlay\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n))\r\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\r\n\r\nconst AlertDialogContent = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPortal>\r\n    <AlertDialogOverlay />\r\n    <AlertDialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </AlertDialogPortal>\r\n))\r\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\r\n\r\nconst AlertDialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-2 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\r\n\r\nconst AlertDialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\r\n\r\nconst AlertDialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\"text-lg font-semibold\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\r\n\r\nconst AlertDialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogDescription.displayName =\r\n  AlertDialogPrimitive.Description.displayName\r\n\r\nconst AlertDialogAction = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Action\r\n    ref={ref}\r\n    className={cn(buttonVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\r\n\r\nconst AlertDialogCancel = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Cancel\r\n    ref={ref}\r\n    className={cn(\r\n      buttonVariants({ variant: \"outline\" }),\r\n      \"mt-2 sm:mt-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\r\n\r\nexport {\r\n  AlertDialog,\r\n  AlertDialogPortal,\r\n  AlertDialogOverlay,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogFooter,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQA,MAAM,cAAc,mLAAyB;AAE7C,MAAM,qBAAqB,sLAA4B;AAEvD,MAAM,oBAAoB,qLAA2B;AAErD,MAAM,mCAAqB,mNAAgB,CAGzC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sLAA4B;QAC3B,WAAW,IAAA,yHAAE,EACX,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;AAGT,mBAAmB,WAAW,GAAG,sLAA4B,CAAC,WAAW;AAEzE,MAAM,mCAAqB,mNAAgB,CAGzC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,sLAA4B;gBAC3B,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;;;;;;;;;;;AAIf,mBAAmB,WAAW,GAAG,sLAA4B,CAAC,WAAW;AAEzE,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,oDACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,iCAAmB,mNAAgB,CAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oLAA0B;QACzB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,oLAA0B,CAAC,WAAW;AAErE,MAAM,uCAAyB,mNAAgB,CAG7C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,0LAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,uBAAuB,WAAW,GAChC,0LAAgC,CAAC,WAAW;AAE9C,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,IAAA,oJAAc,KAAI;QAC/B,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,qLAA2B,CAAC,WAAW;AAEvE,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,IAAA,oJAAc,EAAC;YAAE,SAAS;QAAU,IACpC,gBACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,qLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/app/cms/columns.tsx"],"sourcesContent":["\r\n\"use client\"\r\n\r\nimport { ColumnDef } from \"@tanstack/react-table\"\r\nimport { MoreHorizontal, ArrowUpDown, Edit, Trash2 } from \"lucide-react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport Image from \"next/image\"\r\nimport { Page } from \"./schema\"\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogAction,\r\n    AlertDialogCancel,\r\n    AlertDialogContent,\r\n    AlertDialogDescription,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogTrigger,\r\n  } from \"@/components/ui/alert-dialog\"\r\n\r\nconst PageActions = ({ page, onEdit, onDelete }: { page: Page, onEdit: (page: Page) => void, onDelete: (id: string) => void }) => {\r\n\r\n    return (\r\n        <AlertDialog>\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\r\n                  <span className=\"sr-only\">Open menu</span>\r\n                  <MoreHorizontal className=\"h-4 w-4\" />\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n                <DropdownMenuItem onClick={() => onEdit(page)}><Edit className=\"mr-2 h-4 w-4\" /> Edit</DropdownMenuItem>\r\n                <AlertDialogTrigger asChild>\r\n                    <DropdownMenuItem className=\"text-destructive\"><Trash2 className=\"mr-2 h-4 w-4\" /> Delete</DropdownMenuItem>\r\n                </AlertDialogTrigger>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n            <AlertDialogContent>\r\n                <AlertDialogHeader>\r\n                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\r\n                    <AlertDialogDescription>\r\n                        This action cannot be undone. This will permanently delete the content \"{page.title}\".\r\n                    </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                    <AlertDialogAction onClick={() => onDelete(page.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\r\n                </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n        </AlertDialog>\r\n    )\r\n}\r\n\r\nexport const columns = (onEdit: (page: Page) => void, onDelete: (id: string) => void): ColumnDef<Page>[] => [\r\n  {\r\n    id: \"select\",\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={\r\n          table.getIsAllPageRowsSelected() ||\r\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n        }\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Select all\"\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Select row\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  },\r\n  {\r\n    accessorKey: \"image\",\r\n    header: \"Image\",\r\n    cell: ({ row }) => {\r\n        const imageUrl = row.getValue(\"image\") as string;\r\n        return <Image src={imageUrl} alt=\"content image\" width={40} height={40} className=\"rounded-md\" data-ai-hint=\"product image\" />\r\n    }\r\n  },\r\n  {\r\n    accessorKey: \"title\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\r\n        >\r\n          Title\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      )\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"category\",\r\n    header: \"Category\",\r\n  },\r\n  {\r\n    accessorKey: \"command\",\r\n    header: \"Command\",\r\n    cell: ({ row }) => {\r\n        return <code className=\"font-mono text-sm\">{row.getValue(\"command\")}</code>\r\n    }\r\n  },\r\n  {\r\n    accessorKey: \"description\",\r\n    header: \"Description\",\r\n  },\r\n  {\r\n    id: \"actions\",\r\n    cell: ({ row }) => {\r\n      return (\r\n        <div className=\"text-right\">\r\n            <PageActions page={row.original} onEdit={onEdit} onDelete={onDelete} />\r\n        </div>\r\n      )\r\n    },\r\n  },\r\n]\r\n"],"names":[],"mappings":";;;;;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AAfA;;;;;;;;AA2BA,MAAM,cAAc,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAgF;IAEzH,qBACI,8OAAC,0JAAW;;0BACR,8OAAC,4JAAY;;kCACX,8OAAC,mKAAmB;wBAAC,OAAO;kCAC1B,cAAA,8OAAC,4IAAM;4BAAC,SAAQ;4BAAQ,WAAU;;8CAChC,8OAAC;oCAAK,WAAU;8CAAU;;;;;;8CAC1B,8OAAC,kOAAc;oCAAC,WAAU;;;;;;;;;;;;;;;;;kCAG9B,8OAAC,mKAAmB;wBAAC,OAAM;;0CACzB,8OAAC,iKAAiB;0CAAC;;;;;;0CACnB,8OAAC,gKAAgB;gCAAC,SAAS,IAAM,OAAO;;kDAAO,8OAAC,mNAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAChF,8OAAC,iKAAkB;gCAAC,OAAO;0CACvB,cAAA,8OAAC,gKAAgB;oCAAC,WAAU;;sDAAmB,8OAAC,oNAAM;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;;;;;;0BAI1F,8OAAC,iKAAkB;;kCACf,8OAAC,gKAAiB;;0CACd,8OAAC,+JAAgB;0CAAC;;;;;;0CAClB,8OAAC,qKAAsB;;oCAAC;oCACqD,KAAK,KAAK;oCAAC;;;;;;;;;;;;;kCAG5F,8OAAC,gKAAiB;;0CACd,8OAAC,gKAAiB;0CAAC;;;;;;0CACnB,8OAAC,gKAAiB;gCAAC,SAAS,IAAM,SAAS,KAAK,EAAE;gCAAG,WAAU;0CAAyC;;;;;;;;;;;;;;;;;;;;;;;;AAK5H;AAEO,MAAM,UAAU,CAAC,QAA8B,WAAsD;QAC1G;YACE,IAAI;YACJ,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,gJAAQ;oBACP,SACE,MAAM,wBAAwB,MAC7B,MAAM,yBAAyB,MAAM;oBAExC,iBAAiB,CAAC,QAAU,MAAM,yBAAyB,CAAC,CAAC,CAAC;oBAC9D,cAAW;;;;;;YAGf,MAAM,CAAC,EAAE,GAAG,EAAE,iBACZ,8OAAC,gJAAQ;oBACP,SAAS,IAAI,aAAa;oBAC1B,iBAAiB,CAAC,QAAU,IAAI,cAAc,CAAC,CAAC,CAAC;oBACjD,cAAW;;;;;;YAGf,eAAe;YACf,cAAc;QAChB;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE;gBACV,MAAM,WAAW,IAAI,QAAQ,CAAC;gBAC9B,qBAAO,8OAAC,wIAAK;oBAAC,KAAK;oBAAU,KAAI;oBAAgB,OAAO;oBAAI,QAAQ;oBAAI,WAAU;oBAAa,gBAAa;;;;;;YAChH;QACF;QACA;YACE,aAAa;YACb,QAAQ,CAAC,EAAE,MAAM,EAAE;gBACjB,qBACE,8OAAC,4IAAM;oBACL,SAAQ;oBACR,SAAS,IAAM,OAAO,aAAa,CAAC,OAAO,WAAW,OAAO;;wBAC9D;sCAEC,8OAAC,uOAAW;4BAAC,WAAU;;;;;;;;;;;;YAG7B;QACF;QACA;YACE,aAAa;YACb,QAAQ;QACV;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE;gBACV,qBAAO,8OAAC;oBAAK,WAAU;8BAAqB,IAAI,QAAQ,CAAC;;;;;;YAC7D;QACF;QACA;YACE,aAAa;YACb,QAAQ;QACV;QACA;YACE,IAAI;YACJ,MAAM,CAAC,EAAE,GAAG,EAAE;gBACZ,qBACE,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC;wBAAY,MAAM,IAAI,QAAQ;wBAAE,QAAQ;wBAAQ,UAAU;;;;;;;;;;;YAGnE;QACF;KACD","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,mNAAgB,CAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 601, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Select = SelectPrimitive.Root\r\n\r\nconst SelectGroup = SelectPrimitive.Group\r\n\r\nconst SelectValue = SelectPrimitive.Value\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <SelectPrimitive.Icon asChild>\r\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n    </SelectPrimitive.Icon>\r\n  </SelectPrimitive.Trigger>\r\n))\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronUp className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollUpButton>\r\n))\r\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronDown className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollDownButton>\r\n))\r\nSelectScrollDownButton.displayName =\r\n  SelectPrimitive.ScrollDownButton.displayName\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectScrollUpButton />\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n      <SelectScrollDownButton />\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n))\r\nSelectContent.displayName = SelectPrimitive.Content.displayName\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectLabel.displayName = SelectPrimitive.Label.displayName\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n))\r\nSelectItem.displayName = SelectPrimitive.Item.displayName\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n  SelectScrollUpButton,\r\n  SelectScrollDownButton,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,0KAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,mOAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,mNAAgB,CAG3C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oLAA8B;QAC7B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,6NAAS;YAAC,WAAU;;;;;;;;;;;AAGzB,qBAAqB,WAAW,GAAG,oLAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,mNAAgB,CAG7C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sLAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,mOAAW;YAAC,WAAU;;;;;;;;;;;AAG3B,uBAAuB,WAAW,GAChC,sLAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzD,8OAAC,4KAAsB;kBACrB,cAAA,8OAAC,6KAAuB;YACtB,KAAK;YACL,WAAW,IAAA,yHAAE,EACX,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,8KAAwB;oBACvB,WAAW,IAAA,yHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAoB;QACnB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,6NACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,mLAA6B;8BAC5B,cAAA,8OAAC,6MAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,8OAAC,8KAAwB;0BAAE;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,+KAAyB;QACxB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG,+KAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Popover = PopoverPrimitive.Root\r\n\r\nconst PopoverTrigger = PopoverPrimitive.Trigger\r\n\r\nconst PopoverContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\r\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\r\n  <PopoverPrimitive.Portal>\r\n    <PopoverPrimitive.Content\r\n      ref={ref}\r\n      align={align}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </PopoverPrimitive.Portal>\r\n))\r\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,2KAAqB;AAErC,MAAM,iBAAiB,8KAAwB;AAE/C,MAAM,+BAAiB,mNAAgB,CAGrC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC,6KAAuB;kBACtB,cAAA,8OAAC,8KAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,IAAA,yHAAE,EACX,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,8KAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 843, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n)\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nLabel.displayName = LabelPrimitive.Root.displayName\r\n\r\nexport { Label }\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,uKAAG,EACvB;AAGF,MAAM,sBAAQ,mNAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,yKAAmB;QAClB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,yKAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/app/cms/data-table.tsx"],"sourcesContent":["\r\n\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\"\r\nimport { Download, Trash2, SlidersHorizontal } from \"lucide-react\"\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n  } from \"@/components/ui/select\"\r\nimport {\r\n    Popover,\r\n    PopoverContent,\r\n    PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogAction,\r\n    AlertDialogCancel,\r\n    AlertDialogContent,\r\n    AlertDialogDescription,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogTrigger,\r\n  } from \"@/components/ui/alert-dialog\"\r\nimport { useToast } from \"@/hooks/use-toast\"\r\nimport { Page } from \"./schema\"\r\n\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[]\r\n  data: TData[]\r\n  categories: string[]\r\n  onDelete: (id: string) => void\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  categories,\r\n  onDelete,\r\n}: DataTableProps<TData, TValue>) {\r\n    const [sorting, setSorting] = React.useState<SortingState>([])\r\n    const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\r\n    const [rowSelection, setRowSelection] = React.useState({})\r\n    const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\r\n    const { toast } = useToast()\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    onSortingChange: setSorting,\r\n    getSortedRowModel: getSortedRowModel(),\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    state: {\r\n        sorting,\r\n        columnFilters,\r\n        rowSelection,\r\n        columnVisibility\r\n    },\r\n  })\r\n\r\n  const isFiltered = table.getState().columnFilters.length > 0\r\n\r\n  const handleExport = () => {\r\n    const rows = table.getFilteredRowModel().rows;\r\n    const dataToExport = rows.map(row => row.original as Page);\r\n\r\n    const headers = [\"ID\", \"Title\", \"Category\", \"Command\", \"Description\", \"Image URL\"];\r\n    const csvContent = [\r\n      headers.join(\",\"),\r\n      ...dataToExport.map(item => [\r\n        item.id,\r\n        `\"${item.title.replace(/\"/g, '\"\"')}\"`,\r\n        item.category,\r\n        item.command,\r\n        `\"${item.description.replace(/\"/g, '\"\"')}\"`,\r\n        item.image\r\n      ].join(\",\"))\r\n    ].join(\"\\n\");\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement(\"a\");\r\n    if (link.download !== undefined) {\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute(\"href\", url);\r\n      link.setAttribute(\"download\", \"app-content.csv\");\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n  \r\n  const handleDeleteSelected = () => {\r\n    const selectedRows = table.getFilteredSelectedRowModel().rows;\r\n    selectedRows.forEach(row => {\r\n        onDelete((row.original as Page).id);\r\n    });\r\n    table.resetRowSelection();\r\n    toast({\r\n        title: \"Bulk Delete Complete\",\r\n        description: `${selectedRows.length} content items deleted.`,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n        <div className=\"flex flex-col sm:flex-row items-center gap-4\">\r\n            <div className=\"flex flex-grow items-center gap-2\">\r\n                <Input\r\n                    placeholder=\"Search by title...\"\r\n                    value={(table.getColumn(\"title\")?.getFilterValue() as string) ?? \"\"}\r\n                    onChange={(event) =>\r\n                        table.getColumn(\"title\")?.setFilterValue(event.target.value)\r\n                    }\r\n                    className=\"h-10 w-full lg:w-[250px]\"\r\n                />\r\n                <Popover>\r\n                    <PopoverTrigger asChild>\r\n                         <Button variant=\"outline\" size=\"sm\" className=\"h-10\">\r\n                            <SlidersHorizontal className=\"mr-2 h-4 w-4\" />\r\n                            Filter\r\n                            {isFiltered && <span className=\"ml-2 h-2 w-2 rounded-full bg-primary\" />}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent className=\"w-80\" align=\"start\">\r\n                        <div className=\"grid gap-4\">\r\n                            <div className=\"space-y-2\">\r\n                                <h4 className=\"font-medium leading-none\">Filters</h4>\r\n                                <p className=\"text-sm text-muted-foreground\">\r\n                                Apply filters to the content list.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"grid gap-2\">\r\n                                <div className=\"grid grid-cols-3 items-center gap-4\">\r\n                                    <Label htmlFor=\"category\">Category</Label>\r\n                                    <Select\r\n                                        value={(table.getColumn(\"category\")?.getFilterValue() as string) ?? \"all\"}\r\n                                        onValueChange={(value) =>\r\n                                        table.getColumn(\"category\")?.setFilterValue(value === \"all\" ? undefined : value)\r\n                                        }\r\n                                    >\r\n                                        <SelectTrigger className=\"col-span-2 h-8\">\r\n                                            <SelectValue placeholder=\"Select category\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                            <SelectItem value=\"all\">All Categories</SelectItem>\r\n                                            {categories.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                </div>\r\n                            </div>\r\n                            {isFiltered && (\r\n                                <Button\r\n                                variant=\"ghost\"\r\n                                onClick={() => table.resetColumnFilters()}\r\n                                className=\"h-8 justify-center\"\r\n                                >\r\n                                Clear Filters\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </PopoverContent>\r\n                </Popover>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n                 <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"outline\" size=\"sm\" className=\"h-10\">\r\n                        Columns\r\n                        </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\">\r\n                        {table\r\n                        .getAllColumns()\r\n                        .filter(\r\n                            (column) => column.getCanHide()\r\n                        )\r\n                        .map((column) => {\r\n                            return (\r\n                            <DropdownMenuCheckboxItem\r\n                                key={column.id}\r\n                                className=\"capitalize\"\r\n                                checked={column.getIsVisible()}\r\n                                onCheckedChange={(value) =>\r\n                                column.toggleVisibility(!!value)\r\n                                }\r\n                            >\r\n                                {column.id}\r\n                            </DropdownMenuCheckboxItem>\r\n                            )\r\n                        })}\r\n                    </DropdownMenuContent>\r\n                </DropdownMenu>\r\n                 <AlertDialog>\r\n                    <AlertDialogTrigger asChild>\r\n                        <Button variant=\"outline\" size=\"sm\" className=\"h-10\" disabled={table.getFilteredSelectedRowModel().rows.length === 0}>\r\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                            Delete ({table.getFilteredSelectedRowModel().rows.length})\r\n                        </Button>\r\n                    </AlertDialogTrigger>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader>\r\n                            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\r\n                            <AlertDialogDescription>\r\n                            This will permanently delete {table.getFilteredSelectedRowModel().rows.length} selected content item(s). This action cannot be undone.\r\n                            </AlertDialogDescription>\r\n                        </AlertDialogHeader>\r\n                        <AlertDialogFooter>\r\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                            <AlertDialogAction onClick={handleDeleteSelected} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialog>\r\n                <Button variant=\"outline\" size=\"sm\" className=\"h-10\" onClick={handleExport}>\r\n                    <Download className=\"mr-2 h-4 w-4\" />\r\n                    Export\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"rounded-md border\">\r\n        <Table>\r\n            <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n                <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                    return (\r\n                    <TableHead key={header.id}>\r\n                        {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                            )}\r\n                    </TableHead>\r\n                    )\r\n                })}\r\n                </TableRow>\r\n            ))}\r\n            </TableHeader>\r\n            <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                    key={row.id}\r\n                    data-state={row.getIsSelected() && \"selected\"}\r\n                >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                    </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n                ))\r\n            ) : (\r\n                <TableRow>\r\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                    No results.\r\n                </TableCell>\r\n                </TableRow>\r\n            )}\r\n            </TableBody>\r\n        </Table>\r\n        </div>\r\n        <div className=\"flex items-center justify-between space-x-2\">\r\n            <div className=\"flex-1 text-sm text-muted-foreground\">\r\n                {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\r\n                {table.getFilteredRowModel().rows.length} row(s) selected.\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n                <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => table.previousPage()}\r\n                disabled={!table.getCanPreviousPage()}\r\n                >\r\n                Previous\r\n                </Button>\r\n                <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => table.nextPage()}\r\n                disabled={!table.getCanNextPage()}\r\n                >\r\n                Next\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1481, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Tabs = TabsPrimitive.Root\r\n\r\nconst TabsList = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsList.displayName = TabsPrimitive.List.displayName\r\n\r\nconst TabsTrigger = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\r\n\r\nconst TabsContent = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsContent.displayName = TabsPrimitive.Content.displayName\r\n\r\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\r\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,wKAAkB;AAE/B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,wKAAkB;QACjB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG,wKAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,uYACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mIACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1536, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1621, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {cn} from '@/lib/utils';\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\r\n  ({className, ...props}, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nTextarea.displayName = 'Textarea';\r\n\r\nexport {Textarea};\r\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,mNAAgB,CAC/B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1648, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst ScrollArea = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <ScrollAreaPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\"relative overflow-hidden\", className)}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\r\n      {children}\r\n    </ScrollAreaPrimitive.Viewport>\r\n    <ScrollBar />\r\n    <ScrollAreaPrimitive.Corner />\r\n  </ScrollAreaPrimitive.Root>\r\n))\r\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\r\n\r\nconst ScrollBar = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\r\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n    ref={ref}\r\n    orientation={orientation}\r\n    className={cn(\r\n      \"flex touch-none select-none transition-colors\",\r\n      orientation === \"vertical\" &&\r\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\r\n      orientation === \"horizontal\" &&\r\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\r\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n))\r\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\r\n\r\nexport { ScrollArea, ScrollBar }\r\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,kLAAwB;QACvB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,sLAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,oLAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,kLAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,iMAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,IAAA,yHAAE,EACX,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,6LAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,iMAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1716, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IAmEsB,cAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1728, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IAqCsB,UAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1740, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IAyDsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1752, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IA+CsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1764, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IASsB,WAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1776, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IA2BsB,gBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1788, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IAwFsB,mBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1800, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/actions/cms.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { z } from 'zod';\r\nimport { pageSchema, Page } from '@/app/cms/schema';\r\nimport { api } from '@/lib/api-client';\r\n\r\n\r\nexport async function getPages(): Promise<Page[]> {\r\n  try {\r\n    const { data } = await api.get('/pages');\r\n    const pages = (data as any[]).map((row) => ({\r\n      id: row.id?.toString?.() ?? String(row.id),\r\n      title: row.title,\r\n      category: 'General',\r\n      command: 'N/A',\r\n      description: `Page with order ${row.order}`,\r\n      image: `https://placehold.co/100x100.png?text=${row.title?.charAt(0) ?? 'P'}`,\r\n    }));\r\n    return z.array(pageSchema).parse(pages);\r\n  } catch (error) {\r\n    console.error('Failed to fetch pages:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<string[]> {\r\n    return ['Special Modes', 'Ambiance', 'Wellness', 'General'];\r\n}\r\n\r\n\r\n// Types for form data based on `pages` table\r\nconst PageFormSchema = pageSchema.omit({ id: true, image: true });\r\n\r\n// --- Page Actions ---\r\n\r\nexport async function addPage(values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.post('/pages', { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page added successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to add page.' };\r\n  }\r\n}\r\n\r\nexport async function updatePage(id: string, values: z.infer<typeof PageFormSchema>) {\r\n  try {\r\n    await api.put(`/pages/${id}`, { title: values.title, order: 0, is_published: 1 });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page updated successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to update page.' };\r\n  }\r\n}\r\n\r\nexport async function deletePage(id: string) {\r\n  try {\r\n    await api.delete(`/pages/${id}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Page deleted successfully.' };\r\n  } catch (error) {\r\n    return { success: false, message: 'Failed to delete page.' };\r\n  }\r\n}\r\n\r\nexport async function addCategory(values: { title: string }) {\r\n    console.log(\"Adding category:\", values.title);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: 'Category added successfully (Mock).' };\r\n}\r\n\r\n// Static Content Actions\r\nexport type StaticContentType = 'privacy_policy' | 'terms_conditions' | 'shipping_returns' | 'payment_terms';\r\n\r\nexport interface StaticContent {\r\n  id: number;\r\n  page_type: StaticContentType;\r\n  title: string;\r\n  content: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: number;\r\n  updated_by?: number;\r\n}\r\n\r\nexport async function getStaticContent(pageType: StaticContentType): Promise<StaticContent | null> {\r\n  try {\r\n    const { data } = await api.get(`/cms/static-content/${pageType}`);\r\n    return data.data || null;\r\n  } catch (error) {\r\n    console.error('Failed to fetch static content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllStaticContent(): Promise<StaticContent[]> {\r\n  try {\r\n    const { data } = await api.get('/cms/static-content');\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Failed to fetch all static content:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.post(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content saved successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to save static content:', error);\r\n    return { success: false, message: 'Failed to save content.' };\r\n  }\r\n}\r\n\r\nexport async function updateStaticContent(pageType: StaticContentType, title: string, content: string) {\r\n  try {\r\n    const { data } = await api.put(`/cms/static-content/${pageType}`, { title, content });\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content updated successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to update static content:', error);\r\n    return { success: false, message: 'Failed to update content.' };\r\n  }\r\n}\r\n\r\nexport async function deleteStaticContent(pageType: StaticContentType) {\r\n  try {\r\n    const { data } = await api.delete(`/cms/static-content/${pageType}`);\r\n    revalidatePath('/cms');\r\n    return { success: true, message: data.message || 'Content deleted successfully.' };\r\n  } catch (error) {\r\n    console.error('Failed to delete static content:', error);\r\n    return { success: false, message: 'Failed to delete content.' };\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;IA4GsB,oBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1812, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gargi%20arya/CodeCafeLab/oorjawheel_admin/frontend/src/app/cms/page.tsx"],"sourcesContent":["\r\n\"use client\"\r\nimport { z } from 'zod';\r\nimport { columns } from './columns';\r\nimport { DataTable } from './data-table';\r\nimport { Page } from './schema';\r\nimport { Button } from '@/components/ui/button';\r\nimport { PlusCircle } from 'lucide-react';\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetDescription,\r\n  SheetHeader,\r\n  SheetTitle,\r\n  SheetTrigger,\r\n} from '@/components/ui/sheet';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n  } from \"@/components/ui/select\"\r\nimport Image from 'next/image';\r\nimport * as React from 'react';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { addCategory, addPage, deletePage, updatePage, getPages, getCategories, getStaticContent, saveStaticContent, StaticContentType, StaticContent } from '@/actions/cms';\r\n\r\n\r\nexport default function CmsPage() {\r\n  const [pages, setPages] = React.useState<Page[]>([]);\r\n  const [categories, setCategories] = React.useState<string[]>([]);\r\n  const [isContentSheetOpen, setContentSheetOpen] = React.useState(false);\r\n  const [isCategorySheetOpen, setCategorySheetOpen] = React.useState(false);\r\n  const [selectedPage, setSelectedPage] = React.useState<Page | null>(null);\r\n  const [staticContent, setStaticContent] = React.useState<Record<StaticContentType, StaticContent | null>>({\r\n    privacy_policy: null,\r\n    terms_conditions: null,\r\n    shipping_returns: null,\r\n    payment_terms: null,\r\n  });\r\n  const [activeTab, setActiveTab] = React.useState<string>('privacy');\r\n  const { toast } = useToast();\r\n\r\n  const refreshData = () => {\r\n    getPages().then(setPages);\r\n    getCategories().then(setCategories);\r\n  }\r\n\r\n  const refreshStaticContent = async () => {\r\n    const contentTypes: StaticContentType[] = ['privacy_policy', 'terms_conditions', 'shipping_returns', 'payment_terms'];\r\n    const contentPromises = contentTypes.map(async (type) => {\r\n      const content = await getStaticContent(type);\r\n      return { type, content };\r\n    });\r\n    \r\n    const results = await Promise.all(contentPromises);\r\n    const newStaticContent = results.reduce((acc, { type, content }) => {\r\n      acc[type] = content;\r\n      return acc;\r\n    }, {} as Record<StaticContentType, StaticContent | null>);\r\n    \r\n    setStaticContent(newStaticContent);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    refreshData();\r\n    refreshStaticContent();\r\n  }, []);\r\n\r\n  const handleEdit = (page: Page) => {\r\n    setSelectedPage(page);\r\n    setContentSheetOpen(true);\r\n  }\r\n\r\n  const handleDelete = async (id: string) => {\r\n    const result = await deletePage(id);\r\n    if (result.success) {\r\n      toast({ title: 'Content Deleted', description: 'The content item has been deleted.' });\r\n      refreshData();\r\n    } else {\r\n      toast({ variant: 'destructive', title: 'Error', description: result.message });\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = (ids: string[]) => {\r\n    Promise.all(ids.map(id => deletePage(id))).then(() => {\r\n        toast({ title: 'Content Deleted', description: `${ids.length} content items have been deleted.` });\r\n        refreshData();\r\n    });\r\n  }\r\n\r\n  const handleCategorySubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.currentTarget);\r\n    const title = formData.get('category-title') as string;\r\n    const result = await addCategory({ title });\r\n\r\n    if (result.success) {\r\n        toast({ title: 'Category Added', description: `Category \"${title}\" has been added.` });\r\n        refreshData();\r\n        setCategorySheetOpen(false);\r\n    } else {\r\n        toast({ variant: 'destructive', title: 'Error', description: result.message });\r\n    }\r\n  }\r\n\r\n  const handleContentSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.currentTarget);\r\n    const data = {\r\n        category: formData.get('content-category') as string,\r\n        title: formData.get('content-title') as string,\r\n        command: formData.get('content-command') as string,\r\n        description: formData.get('content-description') as string,\r\n    };\r\n\r\n    const result = selectedPage\r\n        ? await updatePage(selectedPage.id, data)\r\n        : await addPage(data);\r\n    \r\n    if (result.success) {\r\n        toast({ title: selectedPage ? 'Content Updated' : 'Content Added', description: result.message });\r\n        refreshData();\r\n        setContentSheetOpen(false);\r\n        setSelectedPage(null);\r\n    } else {\r\n        toast({ variant: 'destructive', title: 'Error', description: result.message });\r\n    }\r\n  }\r\n\r\n  const handleStaticContentSave = async (pageType: StaticContentType, title: string, content: string) => {\r\n    const result = await saveStaticContent(pageType, title, content);\r\n    \r\n    if (result.success) {\r\n        toast({ title: 'Content Saved', description: result.message });\r\n        refreshStaticContent();\r\n    } else {\r\n        toast({ variant: 'destructive', title: 'Error', description: result.message });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-headline\">Content Management</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Manage content for the web and the mobile app.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      \r\n      <Tabs defaultValue=\"privacy\" className=\"w-full\" onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-5 md:w-auto\">\r\n          <TabsTrigger value=\"privacy\">Privacy Policy</TabsTrigger>\r\n          <TabsTrigger value=\"terms\">Terms & Conditions</TabsTrigger>\r\n          <TabsTrigger value=\"shipping\">Shipping & Returns</TabsTrigger>\r\n          <TabsTrigger value=\"payment\">Payment Terms</TabsTrigger>\r\n          <TabsTrigger value=\"app\">App</TabsTrigger>\r\n        </TabsList>\r\n        <TabsContent value=\"privacy\">\r\n            <StaticContentCard \r\n              pageType=\"privacy_policy\"\r\n              title=\"Privacy Policy\"\r\n              content={staticContent.privacy_policy?.content || ''}\r\n              onSave={handleStaticContentSave}\r\n            />\r\n        </TabsContent>\r\n        <TabsContent value=\"terms\">\r\n            <StaticContentCard \r\n              pageType=\"terms_conditions\"\r\n              title=\"Terms & Conditions\"\r\n              content={staticContent.terms_conditions?.content || ''}\r\n              onSave={handleStaticContentSave}\r\n            />\r\n        </TabsContent>\r\n        <TabsContent value=\"shipping\">\r\n            <StaticContentCard \r\n              pageType=\"shipping_returns\"\r\n              title=\"Shipping & Returns\"\r\n              content={staticContent.shipping_returns?.content || ''}\r\n              onSave={handleStaticContentSave}\r\n            />\r\n        </TabsContent>\r\n         <TabsContent value=\"payment\">\r\n            <StaticContentCard \r\n              pageType=\"payment_terms\"\r\n              title=\"Payment Terms\"\r\n              content={staticContent.payment_terms?.content || ''}\r\n              onSave={handleStaticContentSave}\r\n            />\r\n        </TabsContent>\r\n        <TabsContent value=\"app\">\r\n           {pages.length > 0 ? (\r\n            <Card>\r\n              <CardHeader className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\r\n                  <div>\r\n                      <CardTitle className=\"font-headline\">App Content</CardTitle>\r\n                      <CardDescription>Manage dynamic content for the mobile app.</CardDescription>\r\n                  </div>\r\n                  <div className='flex gap-2'>\r\n                    <Sheet open={isCategorySheetOpen} onOpenChange={setCategorySheetOpen}>\r\n                        <SheetTrigger asChild>\r\n                        <Button variant=\"outline\">\r\n                            <PlusCircle className=\"mr-2 h-4 w-4\" />\r\n                            Add Category\r\n                        </Button>\r\n                        </SheetTrigger>\r\n                        <SheetContent>\r\n                            <SheetHeader>\r\n                                <SheetTitle>Add New Category</SheetTitle>\r\n                            </SheetHeader>\r\n                            <ScrollArea className=\"h-full\">\r\n                                <form onSubmit={handleCategorySubmit}>\r\n                                    <div className=\"grid gap-4 px-6 py-4\">\r\n                                        <div className=\"space-y-2\">\r\n                                            <Label htmlFor=\"category-title\">Category Title</Label>\r\n                                            <Input name=\"category-title\" id=\"category-title\" placeholder=\"e.g., Special Modes\" />\r\n                                        </div>\r\n                                        <Button type=\"submit\">Save Category</Button>\r\n                                    </div>\r\n                                </form>\r\n                            </ScrollArea>\r\n                        </SheetContent>\r\n                    </Sheet>\r\n                    <Sheet open={isContentSheetOpen} onOpenChange={(isOpen) => {\r\n                        setContentSheetOpen(isOpen);\r\n                        if (!isOpen) setSelectedPage(null);\r\n                    }}>\r\n                      <SheetTrigger asChild>\r\n                        <Button onClick={() => { setSelectedPage(null); setContentSheetOpen(true); }}>\r\n                          <PlusCircle className=\"mr-2 h-4 w-4\" />\r\n                          Add Content\r\n                        </Button>\r\n                      </SheetTrigger>\r\n                      <SheetContent className='md:max-w-xl'>\r\n                        <SheetHeader>\r\n                          <SheetTitle>{selectedPage ? 'Edit App Content' : 'Add New App Content'}</SheetTitle>\r\n                        </SheetHeader>\r\n                        <ScrollArea className=\"h-full\">\r\n                            <form onSubmit={handleContentSubmit}>\r\n                            <div className='space-y-4 px-6 py-4'>\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"content-category\">Category</Label>\r\n                                    <Select name=\"content-category\" defaultValue={selectedPage?.category}>\r\n                                        <SelectTrigger id=\"content-category\">\r\n                                            <SelectValue placeholder=\"Select a category\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                            {categories.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                </div>\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"content-image\">Image</Label>\r\n                                    <Input name=\"content-image\" id=\"content-image\" type=\"file\" />\r\n                                </div>\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"content-title\">Title</Label>\r\n                                    <Input name=\"content-title\" id=\"content-title\" placeholder=\"e.g., Party Mode\" defaultValue={selectedPage?.title} />\r\n                                </div>\r\n                                 <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"content-command\">Command</Label>\r\n                                    <Input name=\"content-command\" id=\"content-command\" placeholder=\"e.g., L255,0,255\" defaultValue={selectedPage?.command} />\r\n                                </div>\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"content-description\">Description</Label>\r\n                                    <Textarea name=\"content-description\" id=\"content-description\" placeholder=\"Describe what this content/command does.\" defaultValue={selectedPage?.description} />\r\n                                </div>\r\n                                <Button type=\"submit\">{selectedPage ? 'Save Changes' : 'Save Content'}</Button>\r\n                            </div>\r\n                            </form>\r\n                        </ScrollArea>\r\n                      </SheetContent>\r\n                    </Sheet>\r\n                  </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                  <DataTable \r\n                    columns={columns(handleEdit, handleDelete)} \r\n                    data={pages} \r\n                    categories={categories}\r\n                    onDelete={handleDelete}\r\n                  />\r\n              </CardContent>\r\n            </Card>\r\n           ) : (\r\n             <Card className=\"flex flex-col items-center justify-center py-20\">\r\n                 <CardHeader>\r\n                     <CardTitle className=\"text-xl font-headline\">No App Content Found</CardTitle>\r\n                     <CardDescription>\r\n                         Get started by adding your first piece of app content.\r\n                     </CardDescription>\r\n                 </CardHeader>\r\n                 <CardContent>\r\n                     <Button size=\"lg\" onClick={() => { setSelectedPage(null); setContentSheetOpen(true); }}>\r\n                         <PlusCircle className=\"mr-2 h-4 w-4\" />\r\n                         Add Your First Content\r\n                     </Button>\r\n                 </CardContent>\r\n             </Card>\r\n           )}\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Static Content Card Component\r\ninterface StaticContentCardProps {\r\n  pageType: StaticContentType;\r\n  title: string;\r\n  content: string | null;\r\n  onSave: (pageType: StaticContentType, title: string, content: string) => void;\r\n}\r\n\r\nfunction StaticContentCard({ pageType, title, content, onSave }: StaticContentCardProps) {\r\n  const [localContent, setLocalContent] = React.useState(content || '');\r\n  const [isSaving, setIsSaving] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setLocalContent(content || '');\r\n  }, [content]);\r\n\r\n  const handleSave = async () => {\r\n    setIsSaving(true);\r\n    try {\r\n      await onSave(pageType, title, localContent);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"font-headline\">{title}</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <Textarea \r\n          placeholder={`Enter your ${title.toLowerCase()} content here...`}\r\n          rows={15}\r\n          value={localContent}\r\n          onChange={(e) => setLocalContent(e.target.value)}\r\n        />\r\n        <Button \r\n          onClick={handleSave}\r\n          disabled={isSaving}\r\n        >\r\n          {isSaving ? 'Saving...' : `Save ${title}`}\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}